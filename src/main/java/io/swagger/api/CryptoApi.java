/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Crypto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-15T17:26:22.532+02:00[Europe/Berlin]")
@Validated
public interface CryptoApi {

    @Operation(summary = "Create a new Crypto", description = "Create a new Crypto", tags={ "crypto" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Crypto.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/crypto",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Crypto> createCrypto(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new Crypto", required=true, schema=@Schema()) @Valid @RequestBody Crypto body);


    @Operation(summary = "Delete a Crypto", description = "Delete an existent Crypto by ID", tags={ "crypto" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied") })
    @RequestMapping(value = "/crypto/{cryptoId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCrypto(@Parameter(in = ParameterIn.PATH, description = "Id of the Crypto to delete", required=true, schema=@Schema()) @PathVariable("cryptoId") Long cryptoId);


    @Operation(summary = "Retrieve a Crypto", description = "Retrieve an existent Crypto by ID", tags={ "crypto" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Crypto.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Crypto not found") })
    @RequestMapping(value = "/crypto/{cryptoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Crypto> retrieveCrypto(@Parameter(in = ParameterIn.PATH, description = "Id of the Crypto to return", required=true, schema=@Schema()) @PathVariable("cryptoId") Long cryptoId);


    @Operation(summary = "Transfer money", description = "Transfer money", tags={ "crypto" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "400", description = "Invalid sender/receiver supplied") })
    @RequestMapping(value = "/crypto/transfer",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> transfer(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The sender address" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "sender_address", required = true) String senderAddress, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The receiver address" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "receiver_address", required = true) String receiverAddress, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The amount to transfer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amount", required = true) String amount, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The currency type" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "currency", required = true) String currency);


    @Operation(summary = "Update an existent Crypto", description = "Update an existent Crypto by ID", tags={ "crypto" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Crypto.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Crypto not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/crypto",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Crypto> updateCrypto(@Parameter(in = ParameterIn.DEFAULT, description = "Update an existent Crypto", required=true, schema=@Schema()) @Valid @RequestBody Crypto body);

}

