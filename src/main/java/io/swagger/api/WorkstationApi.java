/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Workstation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-15T17:26:22.532+02:00[Europe/Berlin]")
@Validated
public interface WorkstationApi {

    @Operation(summary = "Access into workstation shell", description = "Access into workstation shell", tags={ "workstation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid id/password supplied") })
    @RequestMapping(value = "/workstation/accessWorkstation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> accessWorkstation(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The workstation id" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "workstation", required = true) String workstation, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The password for login in clear text" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "Create a new Workstation", description = "Create a new Workstation", tags={ "workstation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Workstation.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/workstation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Workstation> createWorkstation(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new Workstation", required=true, schema=@Schema()) @Valid @RequestBody Workstation body);


    @Operation(summary = "Delete a Workstation", description = "Delete an existent Workstation by ID", tags={ "workstation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied") })
    @RequestMapping(value = "/workstation/{workstationId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteWorkstation(@Parameter(in = ParameterIn.PATH, description = "Id of the Workstation to delete", required=true, schema=@Schema()) @PathVariable("workstationId") Long workstationId);


    @Operation(summary = "Retrieve a Workstation", description = "Retrieve an existent Workstation by ID", tags={ "workstation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Workstation.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Workstation not found") })
    @RequestMapping(value = "/workstation/{workstationId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Workstation> retrieveWorkstation(@Parameter(in = ParameterIn.PATH, description = "Id of the Workstation to return", required=true, schema=@Schema()) @PathVariable("workstationId") Long workstationId);


    @Operation(summary = "Update an existent Workstation", description = "Update an existent Workstation by ID", tags={ "workstation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Workstation.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Workstation not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/workstation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Workstation> updateWorkstation(@Parameter(in = ParameterIn.DEFAULT, description = "Update an existent Workstation", required=true, schema=@Schema()) @Valid @RequestBody Workstation body);

}

