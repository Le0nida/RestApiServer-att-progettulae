/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-15T17:26:22.532+02:00[Europe/Berlin]")
@Validated
public interface UserApi {

    @Operation(summary = "Create a new User", description = "Create a new User", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),

            @ApiResponse(responseCode = "405", description = "Invalid input")})
    @RequestMapping(value = "/user",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<User> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new User", required = true, schema = @Schema()) @Valid @RequestBody User body);


    @Operation(summary = "Delete a User", description = "Delete an existent User by ID", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied")})
    @RequestMapping(value = "/user/{userId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@Parameter(in = ParameterIn.PATH, description = "Id of the User to delete", required = true, schema = @Schema()) @PathVariable("userId") Long userId);


    @Operation(summary = "Login for admin", description = "Logs the User into the admin page", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),

            @ApiResponse(responseCode = "400", description = "Invalid username/password supplied")})
    @RequestMapping(value = "/user/admin",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<String> loginAdmin(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The username for admin", required = true, schema = @Schema()) @Valid @RequestParam(value = "username", required = true) String username, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The password for admin in clear text", required = true, schema = @Schema()) @Valid @RequestParam(value = "password", required = true) String password);

    @Operation(summary = "Login for admin", description = "Shows the login page for admin", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation")})
    @RequestMapping(value = "/user/adminLogin",
            method = RequestMethod.GET)
    ResponseEntity<Resource> showAdminLoginPage();

    @Operation(summary = "Login for User", description = "Logs the User into the system", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),

            @ApiResponse(responseCode = "400", description = "Invalid username/password supplied")})
    @RequestMapping(value = "/user/login",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<String> loginUser(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The username for login", required = true, schema = @Schema()) @Valid @RequestParam(value = "username", required = true) String username, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The password for login in clear text", required = true, schema = @Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "Logout for User", description = "Logs out current logged in User session", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation")})
    @RequestMapping(value = "/user/logout",
            method = RequestMethod.GET)
    ResponseEntity<Void> logoutUser();

    @Operation(summary = "Retrieve a User", description = "Retrieve an existent User by ID", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),

            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),

            @ApiResponse(responseCode = "404", description = "User not found")})
    @RequestMapping(value = "/user/{userId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<User> retrieveUser(@Parameter(in = ParameterIn.PATH, description = "Id of the User to return", required = true, schema = @Schema()) @PathVariable("userId") Long userId);


    @Operation(summary = "Update an existent User", description = "Update an existent User by ID", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),

            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),

            @ApiResponse(responseCode = "404", description = "User not found"),

            @ApiResponse(responseCode = "405", description = "Validation exception")})
    @RequestMapping(value = "/user",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<User> updateUser(@Parameter(in = ParameterIn.DEFAULT, description = "Update an existent User", required = true, schema = @Schema()) @Valid @RequestBody User body);

}

